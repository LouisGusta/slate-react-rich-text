{"version":3,"sources":["components/TextEditor.js","App.js","reportWebVitals.js","index.js"],"names":["CustomEditor","isBoldMarkActive","editor","Editor","nodes","match","n","bold","universal","isCodeBlockActive","type","isTitleActive","isItalicMarkActive","italic","toggleBoldMark","isActive","Transforms","setNodes","Text","isText","split","toggleItalicMark","toggleCodeBlock","isBlock","toggleTitleMark","TitleElement","props","attributes","children","Leaf","console","log","leaf","style","fontWeight","fontStyle","CodeElement","DefaultElement","TextEditor","useMemo","withReact","createEditor","useState","text","value","setValue","renderElement","useCallback","element","renderLeaf","className","onChange","onMouseDown","event","preventDefault","onKeyDown","ctrlKey","code","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.008b5a47.chunk.js","sourcesContent":["import { render } from '@testing-library/react'\r\nimport React, { useEffect, useMemo, useState, useCallback } from 'react'\r\nimport { createEditor, Editor, Transforms, Text } from 'slate'\r\nimport { Slate, Editable, withReact } from 'slate-react'\r\nimport { AiOutlineBold, AiOutlineLeft, AiOutlineRight, AiOutlineLineHeight, AiOutlineItalic } from \"react-icons/ai\"\r\n\r\n\r\nimport './TextEditor.css'\r\n\r\nconst CustomEditor = {\r\n    isBoldMarkActive(editor) {\r\n        const [match] = Editor.nodes(\r\n            editor,\r\n            {\r\n                match: n => n.bold === true,\r\n                universal: true,\r\n            })\r\n        return !!match\r\n    },\r\n\r\n    isCodeBlockActive(editor) {\r\n        const [match] = Editor.nodes(\r\n            editor,\r\n            {\r\n                match: n => n.type === 'code',\r\n            })\r\n        return !!match\r\n    },\r\n    isTitleActive(editor) {\r\n        const [match] = Editor.nodes(\r\n            editor,\r\n            {\r\n                match: n => n.type === 'title',\r\n            })\r\n        return !!match\r\n    },\r\n\r\n    isItalicMarkActive(editor) {\r\n        const [match] = Editor.nodes(\r\n            editor,\r\n            {\r\n                match: n => n.italic === true,\r\n                universal: true,\r\n            })\r\n        return !!match\r\n    },\r\n\r\n    toggleBoldMark(editor) {\r\n        const isActive = CustomEditor.isBoldMarkActive(editor)\r\n        Transforms.setNodes(\r\n            editor,\r\n            { bold: isActive ? null : true },\r\n            { match: n => Text.isText(n), split: true }\r\n        )\r\n    },\r\n\r\n    toggleItalicMark(editor) {\r\n        const isActive = CustomEditor.isItalicMarkActive(editor)\r\n        Transforms.setNodes(\r\n            editor,\r\n            { italic: isActive ? null : true },\r\n            { match: n => Text.isText(n), split: true }\r\n        )\r\n    },\r\n\r\n    toggleCodeBlock(editor) {\r\n        const isActive = CustomEditor.isCodeBlockActive(editor)\r\n        Transforms.setNodes(\r\n            editor,\r\n            { type: isActive ? null : 'code' },\r\n            { match: n => Editor.isBlock(editor, n) }\r\n        )\r\n    },\r\n\r\n    toggleTitleMark(editor) {\r\n        const isActive = CustomEditor.isTitleActive(editor)\r\n        Transforms.setNodes(\r\n            editor,\r\n            { type: isActive ? null : 'title' },\r\n            { match: n => Editor.isBlock(editor, n) }\r\n        )\r\n    }\r\n}\r\n\r\nconst TextEditor = () => {\r\n    const editor = useMemo(() => withReact(createEditor()), [])\r\n    const [value, setValue] = useState([\r\n        {\r\n            type: 'paragraph',\r\n            children: [{ text: 'A line of text in a paragraph.' }],\r\n        },\r\n    ])\r\n\r\n    const renderElement = useCallback(props => {\r\n        switch (props.element.type) {\r\n            case 'code':\r\n                return <CodeElement {...props} />\r\n            case 'title':\r\n                return <TitleElement {...props} />\r\n            default:\r\n                return <DefaultElement {...props} />\r\n        }\r\n    }, [])\r\n\r\n    const renderLeaf = useCallback(props => {\r\n        return <Leaf {...props} />\r\n    }, [])\r\n\r\n    return (\r\n        <div className='container'>\r\n            <Slate\r\n                editor={editor}\r\n                value={value}\r\n                onChange={value => setValue(value)}\r\n            >\r\n\r\n                <div className='btn-content'>\r\n                    <button\r\n                        onMouseDown={event => {\r\n                            event.preventDefault()\r\n                            CustomEditor.toggleTitleMark(editor)\r\n                        }}\r\n                    >\r\n                        <AiOutlineLineHeight />\r\n                    </button>\r\n                    <button\r\n                        onMouseDown={event => {\r\n                            event.preventDefault()\r\n                            CustomEditor.toggleItalicMark(editor)\r\n                        }}\r\n                    >\r\n                        <AiOutlineItalic />\r\n                    </button>\r\n                    <button\r\n                        onMouseDown={event => {\r\n                            event.preventDefault()\r\n                            CustomEditor.toggleBoldMark(editor)\r\n                        }}\r\n                    >\r\n                        <AiOutlineBold />\r\n                    </button>\r\n                    <button\r\n                        onMouseDown={event => {\r\n                            event.preventDefault()\r\n                            CustomEditor.toggleCodeBlock(editor)\r\n                        }}\r\n                    >\r\n                        <AiOutlineLeft /><AiOutlineRight />\r\n                    </button>\r\n\r\n                </div>\r\n                <Editable\r\n                    renderElement={renderElement}\r\n                    renderLeaf={renderLeaf}\r\n                    onKeyDown={event => {\r\n                        if (!event.ctrlKey) {\r\n                            return\r\n                        }\r\n                        switch (event.code) {\r\n                            case 'BracketLeft': {\r\n                                event.preventDefault()\r\n\r\n                                CustomEditor.toggleCodeBlock(editor)\r\n                                break\r\n                            }\r\n                            case 'KeyB': {\r\n                                event.preventDefault()\r\n                                CustomEditor.toggleBoldMark(editor)\r\n                                break\r\n                            }\r\n                            case 'KeyH': {\r\n                                event.preventDefault()\r\n                                CustomEditor.toggleTitleMark(editor)\r\n                                break\r\n                            }\r\n                            case 'KeyI': {\r\n                                event.preventDefault()\r\n                                CustomEditor.toggleItalicMark(editor)\r\n                                break\r\n                            }\r\n                        }\r\n                    }}\r\n                />\r\n            </Slate>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst TitleElement = props => {\r\n    return (\r\n        <h1 {...props.attributes}>\r\n            {props.children}\r\n        </h1>\r\n    )\r\n}\r\n\r\nconst Leaf = props => {\r\n    console.log(props.leaf)\r\n\r\n    return (\r\n        <span\r\n            {...props.attributes}\r\n            style={\r\n                {\r\n                    fontWeight: props.leaf.bold ? 'bold' : 'normal',\r\n                    fontStyle: props.leaf.italic ? 'italic' : 'normal',\r\n\r\n                }}\r\n        >\r\n            { props.children}\r\n        </span >\r\n    )\r\n}\r\n\r\n\r\n\r\nconst CodeElement = props => {\r\n    return (\r\n        <pre {...props.attributes}>\r\n            <code>{props.children}</code>\r\n        </pre>\r\n    )\r\n}\r\n\r\nconst DefaultElement = props => {\r\n    return <p {...props.attributes}>{props.children}</p>\r\n}\r\n\r\nexport default TextEditor\r\n","import React from \"react\"\n\nimport TextEditor from \"./components/TextEditor\";\nimport './App.css'\n\nconst App = () => {\n  return (\n    <div>\n      <TextEditor />\n    </div>\n  )\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}